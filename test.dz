
get {f32} from cast
get io
get math


type Shape =
| Circle of f32
| Rectangle of ( f32, height: f32 )

# Function to calculate area of a shape

fn area(shape: Shape): f32 {
    match shape with 
    |Circle(radius) => PI * radius * radius,
    |Rectangle(width, height) => width * height
    
}

# Function to read shapes from user input

fn read_shapes() -> <Shape, 10> {
    set shapes: <Shape, 10>
    set i: u8 = 0
    while (i < 10) {
        io::print("Enter shape type (circle or rectangle): ")
        set shape_type = io::read()
        if (shape_type == "circle") {
            io::print("Enter radius: ")
            set radius = cast::f32(io::read())
            shapes[i] = Circle(radius)
        } else if (shape_type == "rectangle") {
            io::print("Enter width: ")
            set width = io::read()
            io::print("Enter height: ")
            set height = io::read()
            shapes[i] = Rectangle(width, height)
        } else {
            io::println("Invalid shape type. Please enter 'circle' or 'rectangle'.")
            continue
        }
        i++
    }
    return shapes
}

# Function to calculate total area of shapes

fn total_area(shapes: <Shape, 10>): f32 {
    set total: f32 = 0.0
    for (shape : shapes) {
        set shape_area = area(shape)
        total = total + shape_area
    }
    return total
}
 
# Main function

@main fn main = () {
    io::println("Enter details of up to 10 shapes:")
    set shapes = read_shapes()
    io::println("Individual areas:")
    for (shape : shapes) {
        match shape {
            Circle(radius) => io::println("Circle area:", area(shape)),
            Rectangle{width, height} => io::println("Rectangle area:", area(shape))
        }
    }
    set total = total_area(shapes)
    io::println("Total area:", total)
}